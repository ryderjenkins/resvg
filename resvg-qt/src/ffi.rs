/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qguiapp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qimage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qpainter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qpainterpath {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qtransform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qpen {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qbrush {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qlineargradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qradialgradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qfont {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_qfontmetricsf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_rect_f {
    pub x: f64,
    pub y: f64,
    pub w: f64,
    pub h: f64,
}
#[test]
fn bindgen_test_layout_qtc_rect_f() {
    assert_eq!(
        ::std::mem::size_of::<qtc_rect_f>(),
        32usize,
        concat!("Size of: ", stringify!(qtc_rect_f))
    );
    assert_eq!(
        ::std::mem::align_of::<qtc_rect_f>(),
        8usize,
        concat!("Alignment of ", stringify!(qtc_rect_f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_rect_f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_rect_f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_rect_f>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_rect_f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_rect_f>())).w as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_rect_f),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_rect_f>())).h as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_rect_f),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qtc_transform {
    pub a: f64,
    pub b: f64,
    pub c: f64,
    pub d: f64,
    pub e: f64,
    pub f: f64,
}
#[test]
fn bindgen_test_layout_qtc_transform() {
    assert_eq!(
        ::std::mem::size_of::<qtc_transform>(),
        48usize,
        concat!("Size of: ", stringify!(qtc_transform))
    );
    assert_eq!(
        ::std::mem::align_of::<qtc_transform>(),
        8usize,
        concat!("Alignment of ", stringify!(qtc_transform))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).c as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).d as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).e as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qtc_transform>())).f as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(qtc_transform),
            "::",
            stringify!(f)
        )
    );
}
pub const PathSegmentType_MoveToSegment: PathSegmentType = 0;
pub const PathSegmentType_LineToSegment: PathSegmentType = 1;
pub const PathSegmentType_CurveToSegment: PathSegmentType = 2;
pub type PathSegmentType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathSegment {
    pub kind: PathSegmentType,
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_PathSegment() {
    assert_eq!(
        ::std::mem::size_of::<PathSegment>(),
        24usize,
        concat!("Size of: ", stringify!(PathSegment))
    );
    assert_eq!(
        ::std::mem::align_of::<PathSegment>(),
        8usize,
        concat!("Alignment of ", stringify!(PathSegment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathSegment>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathSegment),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathSegment>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PathSegment),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathSegment>())).y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PathSegment),
            "::",
            stringify!(y)
        )
    );
}
pub const PenCapStyle_FlatCap: PenCapStyle = 0;
pub const PenCapStyle_SquareCap: PenCapStyle = 16;
pub const PenCapStyle_RoundCap: PenCapStyle = 32;
pub type PenCapStyle = u32;
pub const PenJoinStyle_BevelJoin: PenJoinStyle = 64;
pub const PenJoinStyle_RoundJoin: PenJoinStyle = 128;
pub const PenJoinStyle_MiterJoin: PenJoinStyle = 256;
pub type PenJoinStyle = u32;
pub const FillRule_OddEvenFill: FillRule = 0;
pub const FillRule_WindingFill: FillRule = 1;
pub type FillRule = u32;
pub const Spread_PadSpread: Spread = 0;
pub const Spread_ReflectSpread: Spread = 1;
pub const Spread_RepeatSpread: Spread = 2;
pub type Spread = u32;
pub const FontStyle_StyleNormal: FontStyle = 0;
pub const FontStyle_StyleItalic: FontStyle = 1;
pub const FontStyle_StyleOblique: FontStyle = 2;
pub type FontStyle = u32;
pub const FontWeight_Thin: FontWeight = 0;
pub const FontWeight_ExtraLight: FontWeight = 12;
pub const FontWeight_Light: FontWeight = 25;
pub const FontWeight_Normal: FontWeight = 50;
pub const FontWeight_Medium: FontWeight = 57;
pub const FontWeight_DemiBold: FontWeight = 63;
pub const FontWeight_Bold: FontWeight = 75;
pub const FontWeight_ExtraBold: FontWeight = 81;
pub const FontWeight_Black: FontWeight = 87;
pub type FontWeight = u32;
pub const FontStretch_UltraCondensed: FontStretch = 50;
pub const FontStretch_ExtraCondensed: FontStretch = 62;
pub const FontStretch_Condensed: FontStretch = 75;
pub const FontStretch_SemiCondensed: FontStretch = 87;
pub const FontStretch_Unstretched: FontStretch = 100;
pub const FontStretch_SemiExpanded: FontStretch = 112;
pub const FontStretch_Expanded: FontStretch = 125;
pub const FontStretch_ExtraExpanded: FontStretch = 150;
pub const FontStretch_UltraExpanded: FontStretch = 200;
pub type FontStretch = u32;
pub const CompositionMode_CompositionMode_SourceOver: CompositionMode = 0;
pub const CompositionMode_CompositionMode_DestinationOver: CompositionMode = 1;
pub const CompositionMode_CompositionMode_Clear: CompositionMode = 2;
pub const CompositionMode_CompositionMode_Source: CompositionMode = 3;
pub const CompositionMode_CompositionMode_Destination: CompositionMode = 4;
pub const CompositionMode_CompositionMode_SourceIn: CompositionMode = 5;
pub const CompositionMode_CompositionMode_DestinationIn: CompositionMode = 6;
pub const CompositionMode_CompositionMode_SourceOut: CompositionMode = 7;
pub const CompositionMode_CompositionMode_DestinationOut: CompositionMode = 8;
pub const CompositionMode_CompositionMode_SourceAtop: CompositionMode = 9;
pub const CompositionMode_CompositionMode_DestinationAtop: CompositionMode = 10;
pub const CompositionMode_CompositionMode_Xor: CompositionMode = 11;
pub const CompositionMode_CompositionMode_Plus: CompositionMode = 12;
pub const CompositionMode_CompositionMode_Multiply: CompositionMode = 13;
pub const CompositionMode_CompositionMode_Screen: CompositionMode = 14;
pub const CompositionMode_CompositionMode_Overlay: CompositionMode = 15;
pub const CompositionMode_CompositionMode_Darken: CompositionMode = 16;
pub const CompositionMode_CompositionMode_Lighten: CompositionMode = 17;
pub const CompositionMode_CompositionMode_ColorDodge: CompositionMode = 18;
pub const CompositionMode_CompositionMode_ColorBurn: CompositionMode = 19;
pub const CompositionMode_CompositionMode_HardLight: CompositionMode = 20;
pub const CompositionMode_CompositionMode_SoftLight: CompositionMode = 21;
pub const CompositionMode_CompositionMode_Difference: CompositionMode = 22;
pub const CompositionMode_CompositionMode_Exclusion: CompositionMode = 23;
pub type CompositionMode = u32;
pub const AspectRatioMode_IgnoreAspectRatio: AspectRatioMode = 0;
pub const AspectRatioMode_KeepAspectRatio: AspectRatioMode = 1;
pub const AspectRatioMode_KeepAspectRatioByExpanding: AspectRatioMode = 2;
pub type AspectRatioMode = u32;
extern "C" {
    pub fn qtc_create_gui(app_name: *mut ::std::os::raw::c_char) -> *mut qtc_qguiapp;
}
extern "C" {
    pub fn qtc_destroy_gui(c_app: *mut qtc_qguiapp);
}
extern "C" {
    pub fn qtc_qimage_create_rgba_premultiplied(width: u32, height: u32) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_create_rgba(width: u32, height: u32) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_from_file(path: *const ::std::os::raw::c_char) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_from_data(data: *const u8, size: ::std::os::raw::c_int) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_get_data(c_img: *mut qtc_qimage) -> *mut u8;
}
extern "C" {
    pub fn qtc_qimage_get_byte_count(c_img: *mut qtc_qimage) -> u32;
}
extern "C" {
    pub fn qtc_qimage_resize(
        c_img: *mut qtc_qimage,
        width: u32,
        height: u32,
        ratio: AspectRatioMode,
        smoothTransformation: bool,
    ) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_copy(
        c_img: *mut qtc_qimage,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_fill(c_img: *mut qtc_qimage, r: u8, g: u8, b: u8, a: u8);
}
extern "C" {
    pub fn qtc_qimage_set_dpi(c_img: *mut qtc_qimage, dpi: f64);
}
extern "C" {
    pub fn qtc_qimage_to_rgba(c_img: *mut qtc_qimage) -> *mut qtc_qimage;
}
extern "C" {
    pub fn qtc_qimage_get_width(c_img: *mut qtc_qimage) -> u32;
}
extern "C" {
    pub fn qtc_qimage_get_height(c_img: *mut qtc_qimage) -> u32;
}
extern "C" {
    pub fn qtc_qimage_save(c_img: *mut qtc_qimage, path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn qtc_qimage_destroy(c_img: *mut qtc_qimage);
}
extern "C" {
    pub fn qtc_qpainter_create(c_img: *mut qtc_qimage) -> *mut qtc_qpainter;
}
extern "C" {
    pub fn qtc_qpainter_set_antialiasing(c_p: *mut qtc_qpainter, flag: bool);
}
extern "C" {
    pub fn qtc_qpainter_set_smooth_pixmap_transform(c_p: *mut qtc_qpainter, flag: bool);
}
extern "C" {
    pub fn qtc_qpainter_get_font(c_p: *mut qtc_qpainter) -> *mut qtc_qfont;
}
extern "C" {
    pub fn qtc_qpainter_set_font(c_p: *mut qtc_qpainter, c_f: *mut qtc_qfont);
}
extern "C" {
    pub fn qtc_qpainter_set_pen(c_p: *mut qtc_qpainter, c_pen: *mut qtc_qpen);
}
extern "C" {
    pub fn qtc_qpainter_reset_pen(c_p: *mut qtc_qpainter);
}
extern "C" {
    pub fn qtc_qpainter_set_brush(c_p: *mut qtc_qpainter, c_brush: *mut qtc_qbrush);
}
extern "C" {
    pub fn qtc_qpainter_reset_brush(c_p: *mut qtc_qpainter);
}
extern "C" {
    pub fn qtc_qpainter_set_opacity(c_p: *mut qtc_qpainter, opacity: f64);
}
extern "C" {
    pub fn qtc_qpainter_draw_path(c_p: *mut qtc_qpainter, c_pp: *mut qtc_qpainterpath);
}
extern "C" {
    pub fn qtc_qpainter_draw_image(c_p: *mut qtc_qpainter, x: f64, y: f64, c_img: *mut qtc_qimage);
}
extern "C" {
    pub fn qtc_qpainter_draw_image_rect(
        c_p: *mut qtc_qpainter,
        x: f64,
        y: f64,
        w: f64,
        h: f64,
        c_img: *mut qtc_qimage,
    );
}
extern "C" {
    pub fn qtc_qpainter_draw_text(
        c_p: *mut qtc_qpainter,
        x: f64,
        y: f64,
        c_text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn qtc_qpainter_draw_rect(c_p: *mut qtc_qpainter, x: f64, y: f64, w: f64, h: f64);
}
extern "C" {
    pub fn qtc_qpainter_translate(c_p: *mut qtc_qpainter, tx: f64, ty: f64);
}
extern "C" {
    pub fn qtc_qpainter_scale(c_p: *mut qtc_qpainter, sx: f64, sy: f64);
}
extern "C" {
    pub fn qtc_qpainter_get_transform(c_p: *mut qtc_qpainter) -> *mut qtc_qtransform;
}
extern "C" {
    pub fn qtc_qpainter_set_transform(
        c_p: *mut qtc_qpainter,
        q_ts: *mut qtc_qtransform,
        combine: bool,
    );
}
extern "C" {
    pub fn qtc_qpainter_set_clip_rect(c_p: *mut qtc_qpainter, x: f64, y: f64, w: f64, h: f64);
}
extern "C" {
    pub fn qtc_qpainter_set_clip_path(c_p: *mut qtc_qpainter, c_pp: *mut qtc_qpainterpath);
}
extern "C" {
    pub fn qtc_qpainter_reset_clip_path(c_p: *mut qtc_qpainter);
}
extern "C" {
    pub fn qtc_qpainter_set_composition_mode(c_p: *mut qtc_qpainter, mode: CompositionMode);
}
extern "C" {
    pub fn qtc_qpainter_get_fontmetricsf(c_p: *mut qtc_qpainter) -> *mut qtc_qfontmetricsf;
}
extern "C" {
    pub fn qtc_qpainter_end(c_p: *mut qtc_qpainter);
}
extern "C" {
    pub fn qtc_qpainter_destroy(c_p: *mut qtc_qpainter);
}
extern "C" {
    pub fn qtc_qpainterpath_create() -> *mut qtc_qpainterpath;
}
extern "C" {
    pub fn qtc_qpainterpath_move_to(c_pp: *mut qtc_qpainterpath, x: f64, y: f64);
}
extern "C" {
    pub fn qtc_qpainterpath_line_to(c_pp: *mut qtc_qpainterpath, x: f64, y: f64);
}
extern "C" {
    pub fn qtc_qpainterpath_curve_to(
        c_pp: *mut qtc_qpainterpath,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        x: f64,
        y: f64,
    );
}
extern "C" {
    pub fn qtc_qpainterpath_close_path(c_pp: *mut qtc_qpainterpath);
}
extern "C" {
    pub fn qtc_qpainterpath_add_text(
        c_pp: *mut qtc_qpainterpath,
        x: f64,
        y: f64,
        c_f: *mut qtc_qfont,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn qtc_qpainterpath_set_fill_rule(c_pp: *mut qtc_qpainterpath, rule: FillRule);
}
extern "C" {
    pub fn qtc_qpainterpath_element_count(c_pp: *mut qtc_qpainterpath) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qtc_qpainterpath_element_at(
        c_pp: *mut qtc_qpainterpath,
        i: ::std::os::raw::c_int,
    ) -> PathSegment;
}
extern "C" {
    pub fn qtc_qpainterpath_get_bbox(c_pp: *mut qtc_qpainterpath) -> qtc_rect_f;
}
extern "C" {
    pub fn qtc_qpainterpath_destroy(c_pp: *mut qtc_qpainterpath);
}
extern "C" {
    pub fn qtc_qtransform_create() -> *mut qtc_qtransform;
}
extern "C" {
    pub fn qtc_qtransform_create_from(
        a: f64,
        b: f64,
        c: f64,
        d: f64,
        e: f64,
        f: f64,
    ) -> *mut qtc_qtransform;
}
extern "C" {
    pub fn qtc_qtransform_get_data(c_ts: *mut qtc_qtransform) -> qtc_transform;
}
extern "C" {
    pub fn qtc_qtransform_destroy(c_ts: *mut qtc_qtransform);
}
extern "C" {
    pub fn qtc_qpen_create() -> *mut qtc_qpen;
}
extern "C" {
    pub fn qtc_qpen_set_color(c_pen: *mut qtc_qpen, r: u8, g: u8, b: u8, a: u8);
}
extern "C" {
    pub fn qtc_qpen_set_brush(c_pen: *mut qtc_qpen, c_brush: *mut qtc_qbrush);
}
extern "C" {
    pub fn qtc_qpen_set_line_cap(c_pen: *mut qtc_qpen, s: PenCapStyle);
}
extern "C" {
    pub fn qtc_qpen_set_line_join(c_pen: *mut qtc_qpen, s: PenJoinStyle);
}
extern "C" {
    pub fn qtc_qpen_set_width(c_pen: *mut qtc_qpen, width: f64);
}
extern "C" {
    pub fn qtc_qpen_set_miter_limit(c_pen: *mut qtc_qpen, limit: f64);
}
extern "C" {
    pub fn qtc_qpen_set_dash_offset(c_pen: *mut qtc_qpen, offset: f64);
}
extern "C" {
    pub fn qtc_qpen_set_dash_array(
        c_pen: *mut qtc_qpen,
        array: *const f64,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn qtc_qpen_destroy(c_pen: *mut qtc_qpen);
}
extern "C" {
    pub fn qtc_qbrush_create() -> *mut qtc_qbrush;
}
extern "C" {
    pub fn qtc_qbrush_set_color(c_brush: *mut qtc_qbrush, r: u8, g: u8, b: u8, a: u8);
}
extern "C" {
    pub fn qtc_qbrush_set_linear_gradient(c_brush: *mut qtc_qbrush, c_lg: *mut qtc_qlineargradient);
}
extern "C" {
    pub fn qtc_qbrush_set_radial_gradient(c_brush: *mut qtc_qbrush, c_rg: *mut qtc_qradialgradient);
}
extern "C" {
    pub fn qtc_qbrush_set_pattern(c_brush: *mut qtc_qbrush, c_img: *mut qtc_qimage);
}
extern "C" {
    pub fn qtc_qbrush_set_transform(c_brush: *mut qtc_qbrush, c_ts: *mut qtc_qtransform);
}
extern "C" {
    pub fn qtc_qbrush_destroy(c_brush: *mut qtc_qbrush);
}
extern "C" {
    pub fn qtc_qlineargradient_create(
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
    ) -> *mut qtc_qlineargradient;
}
extern "C" {
    pub fn qtc_qlineargradient_set_color_at(
        c_lg: *mut qtc_qlineargradient,
        offset: f64,
        r: u8,
        g: u8,
        b: u8,
        a: u8,
    );
}
extern "C" {
    pub fn qtc_qlineargradient_set_spread(c_lg: *mut qtc_qlineargradient, s: Spread);
}
extern "C" {
    pub fn qtc_qlineargradient_destroy(c_lg: *mut qtc_qlineargradient);
}
extern "C" {
    pub fn qtc_qradialgradient_create(
        cx: f64,
        cy: f64,
        fx: f64,
        fy: f64,
        r: f64,
    ) -> *mut qtc_qradialgradient;
}
extern "C" {
    pub fn qtc_qradialgradient_set_color_at(
        c_rg: *mut qtc_qradialgradient,
        offset: f64,
        r: u8,
        g: u8,
        b: u8,
        a: u8,
    );
}
extern "C" {
    pub fn qtc_qradialgradient_set_spread(c_rg: *mut qtc_qradialgradient, s: Spread);
}
extern "C" {
    pub fn qtc_qradialgradient_destroy(c_rg: *mut qtc_qradialgradient);
}
extern "C" {
    pub fn qtc_qfont_create() -> *mut qtc_qfont;
}
extern "C" {
    pub fn qtc_qfont_clone(c_f: *mut qtc_qfont) -> *mut qtc_qfont;
}
extern "C" {
    pub fn qtc_qfont_set_family(c_f: *mut qtc_qfont, family: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qtc_qfont_set_style(c_f: *mut qtc_qfont, style: FontStyle);
}
extern "C" {
    pub fn qtc_qfont_set_small_caps(c_f: *mut qtc_qfont, flag: bool);
}
extern "C" {
    pub fn qtc_qfont_set_weight(c_f: *mut qtc_qfont, weight: FontWeight);
}
extern "C" {
    pub fn qtc_qfont_set_stretch(c_f: *mut qtc_qfont, stretch: FontStretch);
}
extern "C" {
    pub fn qtc_qfont_set_size(c_f: *mut qtc_qfont, size: f64);
}
extern "C" {
    pub fn qtc_qfont_set_letter_spacing(c_f: *mut qtc_qfont, size: f64);
}
extern "C" {
    pub fn qtc_qfont_set_word_spacing(c_f: *mut qtc_qfont, size: f64);
}
extern "C" {
    pub fn qtc_qfont_print_debug(c_f: *mut qtc_qfont);
}
extern "C" {
    pub fn qtc_qfont_destroy(c_f: *mut qtc_qfont);
}
extern "C" {
    pub fn qtc_qfontmetricsf_height(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_width(
        c_fm: *mut qtc_qfontmetricsf,
        text: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_full_width(
        c_fm: *mut qtc_qfontmetricsf,
        text: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_bbox(
        c_fm: *mut qtc_qfontmetricsf,
        text: *const ::std::os::raw::c_char,
    ) -> qtc_rect_f;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_ascent(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_underline_pos(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_overline_pos(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_strikeout_pos(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_get_line_width(c_fm: *mut qtc_qfontmetricsf) -> f64;
}
extern "C" {
    pub fn qtc_qfontmetricsf_destroy(c_fm: *mut qtc_qfontmetricsf);
}
